import * as path from 'node:path'
import { describe, expect, it } from 'vitest'
import { exportPpm, parsePpm, readPpm } from '../src/ppm.js'
import { reassembleYcbcrToRgb, subsamplingCbCr, transformRgbToYcbcrChannels } from '../src/ycbcr.js'
import { mockParsedPpmImg } from './mocks.js'

describe('ppm', () => {
  const filePath = path.resolve('assets/img_1_32.ppm')

  it('read ppm', () => {
    const infos = readPpm(filePath)
    expect(infos).toMatchInlineSnapshot(`
      {
        "format": "P3",
        "height": "16",
        "maxColor": 255,
        "rows": [
          " 15 20 10  16 16 20  31 19 16  10 15 18  41 34 15  59 46 26  53 45 36  102 68 35  106 70 45  118 77 46  76 50 46  56 42 32  42 34 29  29 28 26  47 48 24  65 36 43  63 35 30  81 61 33  114 89 41  72 55 63 ",
          " 21 13 42  15 11 16  39 38 14  29 23 31  26 25 22  71 56 21  36 30 41  94 52 27  90 69 30  60 35 53  102 50 25  64 38 25  13 13 21  23 21 14  35 30 18  80 70 24  83 72 52  99 93 56  75 70 68  46 42 59 ",
          " 43 39 29  50 43 35  69 59 34  35 27 47  18 18 26  72 46 14  54 25 39  144 104 21  65 47 74  8 24 51  64 46 23  26 22 33  13 16 19  13 16 15  29 22 16  69 73 17  77 83 56  68 61 69  60 57 48  56 53 47 ",
          " 64 63 38  51 47 52  54 53 37  32 33 43  32 33 27  19 13 28  64 36 17  135 105 22  62 32 79  18 16 35  19 24 17  29 28 20  29 29 23  34 33 23  33 26 27  56 52 21  79 83 40  77 72 66  73 66 56  72 61 48 ",
          " 89 73 45  56 35 58  20 19 32  23 25 22  24 25 21  77 55 22  94 71 35  107 96 46  69 64 76  57 39 55  57 48 32  47 39 37  49 50 30  78 76 37  61 56 55  56 45 41  117 101 33  91 84 82  69 65 68  39 37 48 ",
          " 64 49 31  43 35 36  7 13 28  11 12 17  16 22 15  57 48 20  69 58 35  66 59 43  73 55 48  96 62 43  90 57 37  70 53 35  64 56 40  62 58 42  50 45 45  50 40 33  93 90 29  96 90 72  33 30 76  25 24 25 ",
          " 35 28 22  37 25 22  19 19 23  18 18 19  29 23 17  27 14 21  54 31 20  83 72 26  118 74 56  150 87 38  80 54 41  66 44 37  69 51 36  34 36 36  29 28 33  50 34 24  86 77 25  65 68 57  28 24 59  45 38 21 ",
          " 45 38 29  39 36 30  31 27 29  30 27 23  55 25 22  37 6 24  73 54 15  88 83 42  130 94 64  97 59 62  44 34 44  29 37 34  40 29 35  66 34 23  44 34 18  73 56 24  69 52 39  16 14 41  49 41 14  47 41 30 ",
          " 56 48 31  44 39 36  19 21 32  12 15 19  18 15 15  42 22 15  31 20 22  23 22 20  89 68 17  72 51 50  45 28 45  32 28 32  26 34 31  111 58 29  52 34 30  48 44 21  23 21 33  8 13 19  29 30 12  13 15 26 ",
          " 45 40 15  43 39 30  14 16 31  24 23 15  26 28 20  39 36 25  37 24 31  37 29 19  75 63 22  62 51 47  55 25 45  31 23 28  19 26 27  57 34 22  18 22 24  26 27 20  9 14 23  17 21 14  15 20 19  7 12 21 ",
          " 19 23 13  25 29 20  48 36 26  51 40 23  26 26 30  22 20 24  15 14 18  28 25 15  79 72 19  62 46 56  25 20 41  27 17 17  18 22 18  27 28 19  63 60 23  70 70 47  33 37 57  12 15 32  20 22 14  15 21 21 ",
          " 40 42 20  20 23 36  123 89 19  92 67 60  29 31 51  101 75 26  49 40 53  9 14 32  24 24 14  23 24 20  42 38 20  30 32 33  54 61 25  45 44 48  52 45 36  51 54 34  38 44 45  14 19 37  16 16 19  23 26 15 ",
          " 46 45 24  42 38 37  65 59 30  80 86 48  67 66 72  74 57 55  68 56 39  30 27 42  36 35 22  39 36 28  60 52 28  58 59 43  68 77 46  42 46 63  38 44 40  27 33 36  56 49 30  32 31 38  2 5 28  25 25 7 ",
          " 25 30 21  98 92 25  54 54 76  76 82 47  44 47 68  30 29 43  49 43 22  30 28 33  43 44 24  41 38 35  39 35 33  62 59 26  36 42 46  34 30 37  42 45 24  39 41 36  72 63 34  30 31 47  16 20 28  27 32 18 ",
          " 53 56 27  108 108 41  78 66 90  47 44 59  24 26 38  33 30 24  56 57 25  89 80 45  119 97 61  57 53 69  32 36 49  51 50 28  29 33 39  36 35 28  17 20 29  15 19 18  44 39 18  50 56 30  35 43 45  26 29 36 ",
          " 70 59 25  86 87 40  58 62 72  34 31 54  38 33 28  34 34 28  77 71 28  135 111 54  136 119 79  37 33 91  50 54 32  69 71 41  32 34 59  17 19 29  29 29 19  59 49 23  55 39 36  39 36 29  26 31 30  15 19 28 ",
          "",
        ],
        "width": "20",
      }
    `)
  })

  it('parse ppm', () => {
    const { rows } = readPpm(filePath)
    const img = parsePpm(rows)
    expect(img).toEqual(mockParsedPpmImg)
  })

  it('export ppm', () => {
    const { Y, Cb, Cr } = transformRgbToYcbcrChannels(mockParsedPpmImg)
    const { subCb, subCr } = subsamplingCbCr(Cb, Cr, '4:2:0')

    const img = reassembleYcbcrToRgb(Y, subCb, subCr, '4:2:0')
    const file = exportPpm(img)
    expect(file).toMatchInlineSnapshot(`
      "P3
      20 16
      255
       14 20 10 13 19 9 30 19 15 22 11 7 41 34 15 55 48 28 53 44 35 81 73 63 106 70 44 114 78 52 75 50 46 63 38 34 42 35 29 34 27 21 46 48 24 46 48 24 63 35 31 84 56 52 113 89 41 83 59 11
       16 22 12 10 16 6 44 33 29 34 23 19 32 25 6 63 56 36 40 31 22 69 61 51 99 63 37 73 37 11 81 56 52 62 37 33 20 13 7 27 20 14 31 33 9 69 71 47 93 65 61 111 83 79 93 69 21 67 43 0
       43 39 28 48 44 33 69 59 34 42 32 7 18 18 26 49 49 57 53 25 39 124 96 110 65 47 73 32 14 40 64 46 22 39 21 0 12 16 19 12 16 19 29 22 16 71 64 58 77 83 57 63 69 43 60 57 48 56 53 44
       64 60 49 53 49 38 61 51 26 44 34 9 31 31 39 16 16 24 60 32 46 123 95 109 56 38 64 29 11 37 37 19 0 42 24 0 25 29 32 29 33 36 34 27 21 56 49 43 76 82 56 72 78 52 70 67 58 66 63 54
       89 74 45 58 43 14 20 20 32 23 23 35 24 25 20 58 59 54 94 72 35 114 92 55 70 64 76 49 43 55 57 48 31 49 40 23 48 50 29 73 75 54 61 55 55 52 46 46 118 101 32 106 89 20 70 65 69 42 37 41
       65 50 21 52 37 8 12 12 24 11 11 23 19 20 15 47 48 43 79 57 20 79 57 20 63 57 69 73 67 79 73 64 47 64 55 38 58 60 39 58 60 39 50 44 44 46 40 40 104 87 18 110 93 24 39 34 38 27 22 26
       35 28 22 34 27 21 19 18 23 18 17 22 28 23 17 23 18 12 54 32 21 87 65 54 117 74 57 132 89 72 80 54 40 70 44 30 69 52 35 49 32 16 29 28 33 38 37 42 87 77 24 79 69 16 28 24 59 37 33 68
       45 38 32 42 35 29 28 27 32 27 26 31 38 33 27 21 16 10 72 50 39 97 75 64 133 90 73 103 60 43 58 32 19 54 28 15 47 30 14 56 39 23 35 34 39 57 56 61 69 59 6 31 21 0 39 35 70 41 37 72
       55 48 30 47 40 22 19 21 33 12 14 26 19 15 14 30 26 25 31 21 22 29 19 20 89 67 17 78 56 6 45 28 46 40 23 41 25 34 31 65 74 71 52 34 30 56 38 34 23 21 34 12 10 23 29 30 12 17 18 0
       46 39 21 46 39 21 14 16 28 19 21 33 29 25 24 39 35 34 36 26 27 37 27 28 83 61 11 75 53 3 46 29 47 36 19 37 18 27 24 34 43 40 34 16 12 39 21 17 14 12 25 19 17 30 19 20 2 13 14 0
       20 23 14 26 29 20 48 35 26 51 38 29 26 25 30 21 20 25 15 14 19 25 24 29 79 72 18 63 56 2 25 20 42 21 16 38 17 22 18 24 29 25 64 60 23 74 70 33 32 37 57 10 15 35 20 21 13 19 20 12
       38 41 32 23 26 17 101 88 79 84 71 62 33 32 37 77 76 81 44 43 48 15 14 19 34 27 0 34 27 0 38 33 55 33 28 50 52 57 53 42 47 43 53 49 12 58 54 17 36 41 61 14 19 39 16 17 9 24 25 17
       46 45 23 42 41 20 64 59 29 87 82 52 67 66 72 62 61 67 68 57 38 40 29 11 37 35 22 39 37 24 60 52 29 65 57 34 68 77 46 44 53 22 38 44 40 28 34 30 56 49 29 39 32 13 3 5 28 19 21 44
       30 29 8 89 88 66 64 59 29 83 78 48 48 47 53 31 30 36 52 41 23 39 28 10 44 42 29 42 40 27 44 36 13 64 56 33 38 47 16 29 38 7 38 44 40 36 42 38 69 62 42 40 33 14 16 18 41 25 27 50
       53 56 27 101 104 75 78 66 90 53 41 65 24 26 38 27 29 41 56 57 25 82 83 51 119 97 60 76 54 17 32 36 48 44 48 60 29 32 39 32 35 42 17 20 29 15 18 27 44 39 19 57 52 31 35 43 45 23 31 33
       59 62 33 82 85 56 68 56 80 41 29 53 31 33 45 30 32 44 71 72 40 115 116 84 140 118 81 61 39 2 46 50 62 63 67 79 33 36 43 17 20 27 25 28 37 46 49 58 49 44 23 42 37 17 23 31 33 13 21 23"
    `)
  })
})
